/*
 * stm32f407xx_spidriver.c
 *
 *  Created on: 23-May-2020
 *      Author: Selva Kumar
 */

/*
 * SPI peripheral clock enable and disable API
 */

#include "stm32f407xx_spidriver.h"

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
	if(pSPIx->SPI_SR & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}

void SPI_PeriClkControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
	  if(EnorDi == ENABLE)
	   {
		   if(pSPIx == SPI1)
		   {
			   SPI1_PCLK_EN;
		   }
		   else if(pSPIx == SPI2)
		   {
			   SPI2_PCLK_EN;
		   }
		   else if(pSPIx == SPI3)
		   	   {
		   		   SPI3_PCLK_EN;
		   	   }

	   }
	   else
	   {
		   if(pSPIx == SPI1)
		   	   {
		   		   SPI1_PCLK_DI;
		   	   }
		   	   else if(pSPIx == SPI2)
		   	   {
		   		   SPI2_PCLK_DI;
		   	   }
		   	   else if(pSPIx == SPI3)
		   	   	   {
		   	   		   SPI3_PCLK_DI;
		   	   	   }


	   }

}


void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	//peripheral clock control
	SPI_PeriClkControl(pSPIHandle->pSPIx,ENABLE);

	//first configure SPI_CR1 register
	uint32_t tempreg = 0;

	//1.config the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;

	//2.config the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
	{
		//bidi mode bit should be cleared for full deplux
		tempreg &= ~(1 << 15);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
		//bidi mode bit should be set for Half duplex
		tempreg |= ( 1 << 15);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	{
		//BIDI mode should be cleared
		tempreg &= ~(1 << 15);
		//RXONLY bit must be set
		tempreg |= (1 << 10);
	}

	//set SPI clk speed
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;

	//set SPI_DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;

	//set SPI_CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;

	//set SPI_CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;

	//set SPI_SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << 9;

    pSPIHandle->pSPIx->SPI_CR1 = tempreg;
}

void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
	while(Len > 0)
	{
		//wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);

		if((pSPIx->SPI_CR1) & (1 << SPI_CR1_DFF))
		{
			//16 bit DFF
			//Load the data in the DR
			pSPIx->SPI_DR = *((uint16_t*)pTxBuffer);
			printf("%d\n",*pTxBuffer);
			Len--;                                          //since the data transmitted is 16 bit so double decrement
			Len--;
			(uint16_t*)pTxBuffer++;
		}else
		{
			//8 bit DFF
			pSPIx->SPI_DR = *pTxBuffer;
			Len--;
			pTxBuffer++;
		}
	}
}


void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->SPI_CR1 |= (1 << SPI_CR1_SPE);
	}else
	{
		pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
	}
}


void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->SPI_CR2 |= (1 << SPI_CR2_SSOE);
	}else
	{
		pSPIx->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}


void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->SPI_CR1 |= (1 << SPI_CR1_SSI);
	}else
	{
		pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
